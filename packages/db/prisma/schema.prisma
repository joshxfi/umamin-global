generator client {
    provider = "prisma-client-js"
    output   = "../dist/generated/client"
}

generator typegraphql {
    provider            = "typegraphql-prisma"
    output              = "../generated/type-graphql"
    formatGeneratedCode = false
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    username      String?   @unique
    createdAt     DateTime  @default(now())
    updatedAt     DateTime? @updatedAt
    role          Role      @default(USER)
    bio           String?   @db.VarChar(255)

    posts    Post[]
    accounts Account[]
    sessions Session[]
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Post {
    id          String   @id
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    content     String   @db.VarChar(500)
    isAnonymous Boolean  @default(false)
    upvotes     Upvote[]
    tags        Tag[]

    authorId String
    author   User   @relation(fields: [authorId], references: [id])

    parentId String?
    parent   Post?   @relation("PostComments", fields: [parentId], references: [id], onUpdate: NoAction, onDelete: NoAction)
    comments Post[]  @relation("PostComments")

    @@index([parentId, createdAt(sort: Desc)])
    @@index([authorId, parentId, createdAt(sort: Desc)])
}

model Upvote {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    userId    String

    postId String
    post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

    @@index([postId])
}

model Tag {
    id        String   @id @default(cuid())
    name      String   @unique
    createdAt DateTime @default(now())
    posts     Post[]
}

enum Role {
    USER
    MODERATOR
    ADMIN
}
